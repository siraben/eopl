letrec append(l) =
  proc(s)
   if null?(l)
   then s
   else cons(car(l),((append cdr(l)) s))
  in
letrec reverse(l) =
  if null?(l)
  then emptylist
  else ((append (reverse(cdr(l)))) cons(car(l),emptylist))
  in
letrec range(start) =
  proc (stop)
    if
      =(start,stop)
    then
      emptylist
    else
      let step =
        if <(start,stop)
          then
            1
          else
            -1
      in
        cons(start, (range +(start, step)) stop)
  in

((append ((range 1) 10)) ((range 11) 20))
